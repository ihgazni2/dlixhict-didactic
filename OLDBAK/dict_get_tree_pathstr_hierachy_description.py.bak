def dict_get_tree_pathstr_hierachy_description(currd,**kwargs):
    '''
        from xdict.utils import *
        from xdict.jprint import pobj
        currd = {'AutoPauseSpeed': 0, 'HRLimitLow': 125, 'Activity': 6, 'UseHRLimits': False, 'SpeedLimitLow': None, 'UseHRBelt': False, 'Id': 13336645, 'Ordinal': 2, 'SpeedLimitHigh': None, 'GPSInterval': 0, 'UseAutolap': True, 'Interval1Time': None, 'Interval2Time': None, 'BacklightMode': None, 'TapFunctionality': None, 'AutolapDistanceFootPOD': None, 'UseIntervals': False, 'AutolapDistanceSpeedPOD': None, 'AutoscrollDelay': 10, 'AutolapDistanceBikePOD': None, 'Interval2Distance': None, 'UseFootPOD': False, 'AltiBaroMode': 1, 'UseCadencePOD': None, 'UseInDevice': True, 'Name': 'Pool swimming', 'HRLimitHigh': 165, 'UseSpeedLimits': None, 'RuleIDs': [11516125, 11516163, 11516164], '__type': 'Suunto.BLL.CustomMode', 'Displays': [{'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 37, 'RuleID': None}, 'Row2': {'Row': None, 'RuleID': 11516125}, 'Views': [{'Row': None, 'RuleID': 11516163}]}, {'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 39, 'RuleID': None}, 'Row2': {'Row': 41, 'RuleID': None}, 'Views': [{'Row': 40, 'RuleID': None}]}, {'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 38, 'RuleID': None}, 'Row2': {'Row': 68, 'RuleID': None}, 'Views': [{'Row': 10, 'RuleID': None}]}, {'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 48, 'RuleID': None}, 'Row2': {'Row': 49, 'RuleID': None}, 'Views': [{'Row': 50, 'RuleID': None}]}, {'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 51, 'RuleID': None}, 'Row2': {'Row': 52, 'RuleID': None}, 'Views': [{'Row': 53, 'RuleID': None}]}, {'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 54, 'RuleID': None}, 'Row2': {'Row': 56, 'RuleID': None}, 'Views': [{'Row': 57, 'RuleID': None}]}, {'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 58, 'RuleID': None}, 'Row2': {'Row': 59, 'RuleID': None}, 'Views': [{'Row': 12, 'RuleID': None}]}, {'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': None, 'RuleID': 11516164}, 'Row2': {'Row': 4, 'RuleID': None}, 'Views': [{'Row': 20, 'RuleID': None}]}], 'AutomaticLogRecording': None, 'AutoPause': None, 'LoggedRuleIDs': [11516163, 11516164, 11516125], 'RecordingInterval': 1, 'Display': None, 'IntervalRepetitions': 0, 'UsePowerPOD': False, 'Interval1Distance': None, 'UseAccelerometer': False, 'UseBikePOD': False, 'UseAutoscroll': False, 'AutolapDistance': 100, 'ShowNavigationSelection': 0, 'Tones': None}
        hierachy_desc = dict_get_tree_pathstr_hierachy_description(currd)
        hierachy_desc.keys()
        print(hierachy_desc['text'])
        pobj(hierachy_desc['parent_dict'])
        pobj(hierachy_desc['description_dict'])
    '''
    if('delimiter' in kwargs):
        delimiter = kwargs['delimiter']
    else:
        delimiter = '/'
    description_dict = dict_get_pathstr_hierachy_description(currd,delimiter=delimiter)
    parent_dict = dict_get_partent_pathstr_hierachy_description_from_description_dict(description_dict)
    total_count = 0
    desc_len = description_dict.__len__()
    lvseq_dict = {}
    travel_sign_dict = {}
    for i in range(0,desc_len):
        lvseq_dict[i] = 0
        travel_sign_dict[i] = {}
        each_level_len = description_dict[i].__len__()
        for j in range(0,each_level_len):
            travel_sign_dict[i][j] = 0
            total_count = total_count + 1
    indent = '    '
    text = ''
    prev_level = -1
    prev_seq = -1
    curr_level = 0
    curr_seq = 0
    count = 0
    deep_search_path = []
    while(count < total_count):
        each_level_len = description_dict[curr_level].__len__()
        full_key_path = description_dict[curr_level][curr_seq]
        if(curr_level > prev_level):
            text = ''.join((text,'\n',indent * curr_level,full_key_path))
            curr_location = (curr_level,curr_seq)
            deep_search_path.append(curr_location)
            count = count + 1
            lvseq_dict[curr_level] = curr_seq
            if(dict_get_all_sons_pathstrs(currd,full_key_path) == []):
                travel_sign_dict[curr_level][curr_seq] = 2
                if(curr_seq < (each_level_len - 1)):
                    prev_seq = curr_seq
                    prev_level = curr_level
                    next_seq = curr_seq + 1
                    cond = (parent_dict[curr_level][curr_seq] == parent_dict[curr_level][next_seq])
                    lvseq_dict[curr_level] = curr_seq + 1
                    if(cond):
                        curr_level = curr_level
                        curr_seq = curr_seq + 1
                    else:
                        curr_level = curr_level - 1
                        curr_seq = lvseq_dict[curr_level]
                else:
                    prev_seq = curr_seq
                    prev_level = curr_level
                    curr_level = curr_level - 1
                    curr_seq = lvseq_dict[curr_level]
            else:
                prev_level = curr_level 
                curr_level = curr_level + 1
                prev_seq = curr_seq
                curr_seq = lvseq_dict[curr_level]
                travel_sign_dict[curr_level][curr_seq] = 1
        elif(curr_level == prev_level):
            text = ''.join((text,'\n',indent * curr_level,full_key_path))
            curr_location = (curr_level,curr_seq)
            deep_search_path.append(curr_location)
            count = count + 1
            lvseq_dict[curr_level] = curr_seq
            if(dict_get_all_sons_pathstrs(currd,full_key_path) == []):
                travel_sign_dict[curr_level][curr_seq] = 2
                if(curr_seq < (each_level_len - 1)):
                    prev_seq = curr_seq
                    prev_level = curr_level
                    next_seq = curr_seq + 1
                    cond = (parent_dict[curr_level][curr_seq] == parent_dict[curr_level][next_seq])
                    lvseq_dict[curr_level] = curr_seq + 1
                    if(cond):
                        curr_level = curr_level
                        curr_seq = curr_seq + 1
                    else:
                        curr_level = curr_level - 1
                        curr_seq = lvseq_dict[curr_level]
                else:
                    prev_seq = curr_seq
                    prev_level = curr_level
                    curr_level = curr_level - 1
                    curr_seq = lvseq_dict[curr_level]
            else:
                prev_level = curr_level 
                curr_level = curr_level + 1
                prev_seq = curr_seq
                curr_seq = lvseq_dict[curr_level]
                travel_sign_dict[curr_level][curr_seq] = 1
        else:
            travel_sign_dict[curr_level][curr_seq] = 2
            if(curr_seq < (each_level_len - 1)):
                prev_seq = curr_seq
                prev_level = curr_level
                next_seq = curr_seq + 1
                cond = (parent_dict[curr_level][curr_seq] == parent_dict[curr_level][next_seq])
                lvseq_dict[curr_level] = curr_seq + 1
                if(cond):
                    curr_level = curr_level
                    curr_seq = curr_seq + 1
                else:
                    curr_level = curr_level - 1
                    curr_seq = lvseq_dict[curr_level]
            else:
                prev_seq = curr_seq
                prev_level = curr_level
                curr_level = curr_level - 1
                curr_seq = lvseq_dict[curr_level]
    rslt = {}
    rslt['text'] = text
    rslt['parent_dict'] = parent_dict
    rslt['deep_search_path'] =  deep_search_path
    rslt['description_dict'] = description_dict
    return(rslt)
