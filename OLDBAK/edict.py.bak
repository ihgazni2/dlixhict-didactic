class edict(dict):
    def setdefault_via_pathlist(self,pathlist,**kwargs):
        '''
            edict1 = edict({})
            edict1
            path_list = ['c','b']
            edict1.setdefault_via_pathlist(path_list)
            edict1
        '''
        if('s2n' in kwargs):
            s2n = kwargs['s2n']
        else:
            s2n = 0
        if('n2s' in kwargs):
            n2s = kwargs['n2s']
        else:
            n2s = 0
        if('default_element' in kwargs):
            default_element = kwargs['default_element']
        else:
            default_element = {}
        return(dict_setdefault_via_path_list(self,pathlist,s2n=s2n,n2s=n2s,default_element=default_element))
    
    def setitem_via_pathlist(self,pathlist,value,**kwargs):
        '''
            edict1 = edict({})
            edict1
            
            path_list = ['c','b']
            edict1.setitem_via_pathlist(path_list,'i am ok')
            edict1
            
            
            path_list = ['c']
            edict1.setitem_via_pathlist(path_list,{})
            edict1
            
            path_list = ['c','b']
            edict1.setitem_via_pathlist(path_list,'i am ok')
            edict1
        '''
        if('s2n' in kwargs):
            s2n = kwargs['s2n']
        else:
            s2n = 0
        if('n2s' in kwargs):
            n2s = kwargs['n2s']
        else:
            n2s = 0
        return(dict_setitem_via_path_list(self,pathlist,value,s2n=s2n,n2s=n2s))
    
    def getitem_via_pathlist(self,pathlist,**kwargs):
        '''
            edict1 = edict({'c':{'b':'x'}})
            edict1
            
            path_list = ['c','b']
            edict1.getitem_via_pathlist(path_list)
            
        '''
        if('s2n' in kwargs):
            s2n = kwargs['s2n']
        else:
            s2n = 0
        if('n2s' in kwargs):
            n2s = kwargs['n2s']
        else:
            n2s = 0
        return(dict_getitem_via_path_list(self,pathlist,s2n=s2n,n2s=n2s))
    
    def getitem_via_cmd(self,cmd_str,**kwargs):
        '''
            edict1 = edict({'c':{'b':'x'}})
            edict1
            
            cmd = 'c b'
            edict1.getitem_via_cmd(cmd)
            
        '''
        if('s2n' in kwargs):
            s2n = kwargs['s2n']
        else:
            s2n = 0
        if('n2s' in kwargs):
            n2s = kwargs['n2s']
        else:
            n2s = 0
        if('cmd_sp' in kwargs):
            cmd_sp = kwargs['cmd_sp']
        else:
            cmd_sp = ' '
        return(dict_getitem_via_cmd(self,cmd_str,s2n=s2n,n2s=n2s,cmd_sp=cmd_sp))

    def getitem_via_pathstr(self,pathstr,**kwargs):
        '''
            edict1 = edict({'c':{'b':'x'}})
            edict1
            
            pathstr = 'c/b'
            edict1.getitem_via_pathstr(pathstr)
            
        '''
        if('delimiter' in kwargs):
            delimiter = kwargs['delimiter']
        else:
            delimiter = '/'
        if('strip_head_sp' in kwargs):
            strip_head_sp = kwargs['strip_head_sp']
        else:
            strip_head_sp = 0
        if('strip_tail_sp' in kwargs):
            strip_tail_sp = kwargs['strip_tail_sp']
        else:
            strip_tail_sp = 0
        return(dict_getitem_via_pathstr(self,pathstr,delimiter = delimiter,strip_head_sp =strip_head_sp,strip_tail_sp = strip_tail_sp))

    def delitem_via_pathlist(self,pathlist,**kwargs):
        '''
            edict1 = edict({'c':{'b':'x'}})
            edict1
            
            pathlist = ['c','b']
            edict1.delitem_via_pathlist(pathlist)
            
        '''
        if('s2n' in kwargs):
            s2n = kwargs['s2n']
        else:
            s2n = 0
        if('n2s' in kwargs):
            n2s = kwargs['n2s']
        else:
            n2s = 0
        return(dict_delitem_via_path_list(self,pathlist,s2n=s2n,n2s=n2s))

    def sons_pathstrs(self,parent_pathstr,**kwargs):
        '''
            edict1 = edict({1:'a',2:{'x':'b'}})
            edict1
            
            edict1.sons_pathstrs('')
            edict1.sons_pathstrs('2')
            edict1.sons_pathstrs('2/x')
            
        '''
        if('delimiter' in kwargs):
            delimiter = kwargs['delimiter']
        else:
            delimiter = '/'
        return(dict_get_all_sons_pathstrs(self,parent_pathstr,delimiter = delimiter))

    def include_pathlist(self,pathlist,**kwargs):
        '''
            edict1 = edict({1:'a',2:{'x':'b'}})
            edict1
            
            pathlist = [2,'x']
            edict1.include_pathlist(pathlist)
        '''
        if('s2n' in kwargs):
            s2n = kwargs['s2n']
        else:
            s2n = 0
        if('n2s' in kwargs):
            n2s = kwargs['n2s']
        else:
            n2s = 0
        return(dict_include_pathlist(self,pathlist,s2n=s2n,n2s=n2s))

    def keys_via_value(self,value):
        '''
            edict1 = edict({1:'a',2:{'mm':'a'}})
            edict1
            edict1.keys_via_value('a')
        '''
        #necessary beacause is_dict 
        d = dict(self)
        return(dict_find_keys_via_value(d,value))

    def keys_via_value_non_recursive(self,value):
        '''
            edict1 = edict({1:'a',2:{'mm':'a'}})
            edict1
            edict1.keys_via_value_non_recursive('a')
        '''
        return(dict_non_recursive_find_keys_via_value(self,value))

    def pathstr_hierachy_description(self,**kwargs):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            currd = { 'HRLimitHigh': 165, 'RuleIDs': [11516125, 11516163, 11516164], 'Displays': [{'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 37, 'RuleID': None}}]}
            edict1 = edict(currd)
            desc_dict = edict1.pathstr_hierachy_description()
            pobj(desc_dict)
        '''
        if('delimiter' in kwargs):
            delimiter = kwargs['delimiter']
        else:
            delimiter = '/'
        # necessary for is_dict
        d = dict(self)
        return(dict_get_pathstr_hierachy_description(d,delimiter = delimiter))

    def tree_pathstr_hierachy_description(self,**kwargs):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            currd = { 'HRLimitHigh': 165, 'RuleIDs': [11516125, 11516163, 11516164], 'Displays': [{'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 37, 'RuleID': None}}]}
            edict1 = edict(currd)
            hierachy_desc = edict1.tree_pathstr_hierachy_description()
            hierachy_desc.keys()
            print(hierachy_desc['text'])
            pobj(hierachy_desc['parent_dict'])
            pobj(hierachy_desc['description_dict'])
        '''
        if('delimiter' in kwargs):
            delimiter = kwargs['delimiter']
        else:
            delimiter = '/'
        # necessary for is_dict
        d = dict(self)
        return(dict_get_tree_pathstr_hierachy_description(d,delimiter = delimiter))

    def update_just_intersection(self,dict2):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            edict1 = edict({1:'a',2:'b',3:'c',4:'d'})
            edict2 = edict({5:'u',2:'v',3:'w',6:'x',7:'y'})
            edict1.update_just_intersection(edict1,edict2)
            pobj(edict1)
            pobj(edict2)
        '''
        return(dict_update_just_intersection(self,dict2))

    def uniqualize(self):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            edict1 = edict({1:'a',2:'b',3:'c',4:'b'})
            edict1.uniqualize()
            pobj(edict1)
        '''
        return(dict_uniqualize(self))

    def xextend(self,dict2,**kwargs):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            edict1 = edict({1:'a',2:'b',3:'c',4:'d'})
            edict2 = edict({5:'u',2:'v',3:'w',6:'x',7:'y'})
            edict1.xextend(edict2)
            pobj(edict1)
            pobj(edict2)
            edict1 = edict({1:'a',2:'b',3:'c',4:'d'})
            edict2 = edict({5:'u',2:'v',3:'w',6:'x',7:'y'})
            edict1.xextend(edict2,overwrite=1)
            pobj(edict1)
        '''
        if('deepcopy' in kwargs):
            deepcopy=kwargs['deepcopy']
        else:
            deepcopy=1
        if('overwrite' in kwargs):
            overwrite=kwargs['overwrite']
        else:
            overwrite=0
        if(deepcopy):
            dict1 = copy.deepcopy(self)
            dict2 = copy.deepcopy(dict2)
        else:
            pass
        return(dict_extend(dict1,dict2,deepcopy=deepcopy,overwrite=overwrite))

    def comprise(self,dict2):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            edict1 = edict({'a':1,'b':2,'c':3,'d':4})
            edict2 = edict({'b':2,'c':3})
            edict1.comprise(edict2)
        '''
        return((dict_comprise(self,dict2)))

    def value_keys_description(self):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            edict1 = edict({'a':1,'b':2,'c':2,'d':4})
            edict1.value_keys_description()
        '''
        return((dict_get_value_keys_description(self)))

    def tree_pathstr_with_dynamic_indent(self,**kwargs):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            currd = { 'HRLimitHigh': 165, 'RuleIDs': [11516125, 11516163, 11516164], 'Displays': [{'RequiresHRBelt': None, 'Type': 5, 'Row1': {'Row': 37, 'RuleID': None}}]}
            edict1 = edict(currd)
            s = edict1.tree_pathstr_with_dynamic_indent()
            print(s)
        '''
        d = dict(self)
        if('delimiter' in kwargs):
            delimiter = kwargs['delimiter']
        else:
            delimiter = '/'
        tree_pathstr_hierachy_description = dict_get_tree_pathstr_hierachy_description(d,delimiter = delimiter)
        deep_search_path = tree_pathstr_hierachy_description['deep_search_path'] 
        description_dict = tree_pathstr_hierachy_description['description_dict']
    
        if('from' in kwargs):
            fr = kwargs['from']
        else:
            fr = 0
        dsp_len = deep_search_path.__len__()
        if('to' in kwargs):
            to = kwargs['to']
        else:
            to = dsp_len
        return(dict_print_tree_pathstr_with_dynamic_indent(d,delimiter =delimiter,fr=fr,to=to))

    def max_wordwidth(self):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            currd = {0:'AutoPauseSpeed', 125:'HRLimitLow', 6:'Activity'}
            edict1 = edict(currd)
            edict1.max_wordwidth()
        '''
        return(dict_get_max_wordwidth(self))

    def max_word_displaywidth(self):
        '''
            from xdict.utils import *
            from xdict.jprint import pobj
            currd = {0:'你们大家好', 125:'ABCDE', 6:'1234567'}
            edict1 = edict(currd)
            edict1.max_word_displaywidth()
        '''
        return(dict_get_max_word_displaywidth(self))
