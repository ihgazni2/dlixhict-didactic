def str_tail_to_head(s, tail_len,**kwargs):
    '''
        >>> str_tail_to_head("abcdefghi",0)
        'abcdefghi'
        >>> str_tail_to_head("abcdefghi",1)
        'iabcdefgh'
        >>> str_tail_to_head("abcdefghi",2)
        'hiabcdefg'
        >>> str_tail_to_head("abcdefghi",3)
        'ghiabcdef'
        >>> str_tail_to_head("abcdefghi",4)
        'fghiabcde'
        >>> str_tail_to_head("abcdefghi",5)
        'efghiabcd'
        >>> str_tail_to_head("abcdefghi",6)
        'defghiabc'
        >>> str_tail_to_head("abcdefghi",7)
        'cdefghiab'
        >>> str_tail_to_head("abcdefghi",8)
        'bcdefghia'
        >>> str_tail_to_head("abcdefghi",9)
        'abcdefghi'
        >>> str_tail_to_head("abcdefghi",10)
        'iabcdefgh'
        >>> str_tail_to_head("abcdefghi",10,repeat=0)
        '\x00abcdefgh'
        >>> str_tail_to_head("abcdefghi",11,repeat=0)
        '\x00\x00abcdefg'
        >>> str_tail_to_head("abcdefghi",12,repeat=0)
        '\x00\x00\x00abcdef'
        >>> 
    '''
    if("repeat" in kwargs):
        repeat = kwargs['repeat']
    else:
        repeat = 1
    if("padding" in kwargs):
        padding = kwargs['padding']
    else:
        padding = '\x00'
    I = ""
    if(repeat):
        for J in range(0,s.__len__()):
            seq = (J + s.__len__() - tail_len) % s.__len__()
            I = I + s[seq]
    else:
        for J in range(0,s.__len__()):
            seq = (J + s.__len__() - tail_len) 
            if(seq < 0):
                I = I + padding
            else:
                seq = seq % s.__len__()
                I = I + s[seq]
    return(I)



def str_head_to_tail(s, head_len,**kwargs):
    if("repeat" in kwargs):
        repeat = kwargs['repeat']
    else:
        repeat = 1
    if("padding" in kwargs):
        padding = kwargs['padding']
    else:
        padding = '\x00'
    rslt =str_tail_to_head(s, s.__len__() - head_len,repeat=repeat,padding=padding)
    if(repeat):
        pass
    else:
        if(s.__len__() < head_len):
            r = head_len % s.__len__()
            rslt = rslt[:s.__len__()-r] + padding * r
        else:
            pass
    return(rslt)



##bytes
def four_bytes_order_reverse(L):
    ''' 255       0x00ff
        65280     0xff00
        byte4-byte3-byte2-byte1
        byte1-byte2-byte3-byte4
    '''
    L = (L & 255) << 24 | (L & 65280) << 8 | L >> 8 & 65280 | L >> 24 & 255
    return(L)

